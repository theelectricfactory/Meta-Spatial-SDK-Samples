{
  "components": [
    {
      "name": "com.meta.pixelandtexel.scanner.TrackedObject",
      "attributes": [
        {
          "name": "objectId",
          "keyString": "objectId",
          "type": {
            "attributeType": "Int"
          },
          "description": "The detected object id. "
        }
      ],
      "description": "\n A component representing an object detected using ML and tracked across frames.\n"
    },
    {
      "name": "com.meta.pixelandtexel.scanner.ViewLocked",
      "attributes": [
        {
          "name": "position",
          "keyString": "position",
          "type": {
            "attributeType": "Vector3"
          },
          "description": "The position offset to apply to the object, relative to the head. "
        },
        {
          "name": "rotation",
          "keyString": "rotation",
          "type": {
            "attributeType": "Vector3"
          },
          "description": "The rotation offset in euler angles to apply to the object, relative to the head. "
        },
        {
          "name": "fillView",
          "keyString": "fillView",
          "type": {
            "attributeType": "Boolean"
          },
          "description": "Whether or not to add a z offset so that the panel fills the camera view across the width of the panel. "
        }
      ],
      "description": "\n A component which locks the position and rotation of an entity which has a Panel component to the user\u0027s view.\n"
    },
    {
      "name": "com.meta.pixelandtexel.scanner.WristAttached",
      "attributes": [
        {
          "name": "position",
          "keyString": "position",
          "type": {
            "attributeType": "Vector3"
          },
          "description": "The position offset to apply to the object, relative to the hand. "
        },
        {
          "name": "rotation",
          "keyString": "rotation",
          "type": {
            "attributeType": "Vector3"
          },
          "description": "The rotation offset in euler angles to apply to the object, relative to the hand. "
        },
        {
          "name": "side",
          "keyString": "side",
          "type": {
            "attributeType": "com.meta.pixelandtexel.scanner.HandSide"
          }
        },
        {
          "name": "faceUser",
          "keyString": "faceUser",
          "type": {
            "attributeType": "Boolean"
          },
          "description": "Whether or not to orient the entity such that it faces the user (ignores the rotation offset). "
        }
      ],
      "description": "\n A component which positions and orients the entity on the user\u0027s wrist.\n"
    },
    {
      "name": "com.meta.spatial.toolkit.Animated",
      "attributes": [
        {
          "name": "pausedTime",
          "keyString": "pausedTime",
          "type": {
            "attributeType": "Float"
          },
          "description": "Paused location/time (sec) within animation track "
        },
        {
          "name": "playbackState",
          "keyString": "playbackState",
          "type": {
            "attributeType": "com.meta.spatial.toolkit.PlaybackState"
          },
          "description": "State of the animation (playing or paused) "
        },
        {
          "name": "playbackType",
          "keyString": "playbackType",
          "type": {
            "attributeType": "com.meta.spatial.toolkit.PlaybackType"
          },
          "description": "The type of animation playback to be used "
        },
        {
          "name": "startTime",
          "keyString": "startTime",
          "type": {
            "attributeType": "Long"
          },
          "description": "World time at which animation started (ms since epoch) "
        },
        {
          "name": "track",
          "keyString": "track",
          "type": {
            "attributeType": "Int"
          },
          "description": "which animation track of the glTF to play "
        }
      ],
      "description": "\n Plays animation for a glTF asset. Also configures different settings for animation.\n @param startTime World time at which animation started (ms since epoch)\n @param pausedTime Paused location/time (sec) within animation track\n @param playbackState Playback state of the animated entity\n @param playbackType Playback type of the animated entity\n @param track the animation track of the glTF to play\n"
    },
    {
      "name": "com.meta.spatial.toolkit.Audio",
      "attributes": [
        {
          "name": "audio",
          "keyString": "audio",
          "type": {
            "attributeType": "String"
          },
          "description": "The Uri String of the audio file to be used "
        },
        {
          "name": "volume",
          "keyString": "volume",
          "type": {
            "attributeType": "Float"
          }
        }
      ],
      "description": "\n  Audio component that can be attached to an entity. This component will play audio spatially from the entity.\n  @param file The Uri String of the audio file to be used\n  @param volume The volume of the audio to be played, default is 1.0f\n  @property audio The Uri String of the audio file to be used\n  @property volume The volume of the audio to be played, default is 1.0f \n"
    },
    {
      "name": "com.meta.spatial.toolkit.AvatarAttachment",
      "attributes": [
        {
          "name": "type",
          "keyString": "type",
          "type": {
            "attributeType": "String"
          },
          "description": "Which part of the avatar the entity is meant to represent (i.e. head, body, right_hand, left_controller) "
        }
      ],
      "description": "\n Defines what part of an Avatar the entity is meant to represent. (head, body, controller, etc.)\n"
    },
    {
      "name": "com.meta.spatial.toolkit.AvatarBody",
      "attributes": [
        {
          "name": "head",
          "keyString": "head",
          "type": {
            "attributeType": "Entity"
          }
        },
        {
          "name": "isPlayerControlled",
          "keyString": "isPlayerControlled",
          "type": {
            "attributeType": "Boolean"
          }
        },
        {
          "name": "leftHand",
          "keyString": "leftHand",
          "type": {
            "attributeType": "Entity"
          }
        },
        {
          "name": "rightHand",
          "keyString": "rightHand",
          "type": {
            "attributeType": "Entity"
          }
        },
        {
          "name": "root",
          "keyString": "root",
          "type": {
            "attributeType": "Entity"
          }
        }
      ],
      "description": "\n AvatarBody is a component that represents the body of an avatar. It contains references to the\n head, left hand, right hand, and root of the avatar. It also contains a boolean flag to indicate\n whether the avatar is player controlled.\n \n @param head The head Entity of the avatar.\n @param leftHand The left hand Entity of the avatar.\n @param rightHand The right hand Entity of the avatar.\n @param root The root Entity of the avatar.\n @param isPlayerControlled A boolean flag to indicate whether the avatar is player controlled.\n"
    },
    {
      "name": "com.meta.spatial.toolkit.Box",
      "attributes": [
        {
          "name": "max",
          "keyString": "max",
          "type": {
            "attributeType": "Vector3"
          },
          "description": "\n The relative offset of the top corner (furthest in the +x, +y, +z direction) of the box from\n the center\n"
        },
        {
          "name": "min",
          "keyString": "min",
          "type": {
            "attributeType": "Vector3"
          },
          "description": "\n The relative offset of the bottom corner (furthest in the -x, -y, -z direction) of the box from\n the center\n"
        }
      ],
      "description": "\n Defines the dimensions of a box shape by the relative offset of two opposite corners. A box of\n max\u003dVector3(1,1,1) and min\u003dVector3(-1,-1,-1) will result in a 2x2x2 box. This is to be used with\n the `mesh://box` `Mesh` URI.\n \n @property min The relative offset of the bottom corner (furthest in the -x, -y, -z direction)\n @property max The relative offset of the top corner (furthest in the +x, +y, +z direction)\n"
    },
    {
      "name": "com.meta.spatial.toolkit.Controller",
      "attributes": [
        {
          "name": "buttonState",
          "keyString": "buttonState",
          "type": {
            "attributeType": "Int"
          },
          "description": "The current state of the buttons being pressed represented by integer bits "
        },
        {
          "name": "changedButtons",
          "keyString": "changedButtons",
          "type": {
            "attributeType": "Int"
          },
          "description": "Which buttons (represented by integer bits) have been changed (pressed or unpressed since the last frame) "
        },
        {
          "name": "directTouchButtonState",
          "keyString": "directTouchButtonState",
          "type": {
            "attributeType": "Int"
          },
          "description": "The state of the direct touch buttons "
        },
        {
          "name": "directTouchEnabled",
          "keyString": "directTouchEnabled",
          "type": {
            "attributeType": "Boolean"
          }
        },
        {
          "name": "isActive",
          "keyString": "isActive",
          "type": {
            "attributeType": "Boolean"
          }
        },
        {
          "name": "laserEnabled",
          "keyString": "laserEnabled",
          "type": {
            "attributeType": "Boolean"
          }
        },
        {
          "name": "type",
          "keyString": "type",
          "type": {
            "attributeType": "com.meta.spatial.toolkit.ControllerType"
          },
          "description": "What type of controller it is: 0-\u003econtroller 1-\u003ehand 2-\u003eeye "
        }
      ],
      "description": "\n Represents Controller Data and properties that can be used to facilitate input.\n \n @param buttonState The current state of the buttons being pressed represented by integer bits\n @param changedButtons Which buttons (represented by integer bits) have been changed (pressed or\n unpressed)\n @param isActive Whether the controller is active or not\n @param type What type of controller it is: 0-\u003econtroller 1-\u003ehand\n @param directTouchEnabled Whether direct touch is enabled or not\n @param directTouchButtonState The state of the direct touch buttons\n @param laserEnabled Whether the laser is enabled or not\n"
    },
    {
      "name": "com.meta.spatial.toolkit.CreatorVisibility",
      "attributes": [
        {
          "name": "state",
          "keyString": "state",
          "type": {
            "attributeType": "com.meta.spatial.toolkit.CreatorVisibilityState"
          },
          "description": "\n Different states of CreatorVisibility, such as only visible to the creator, or only invisible\n to the creator\n"
        }
      ],
      "description": "\n Use this Component to hide an Entity from every user except for the creator\n of the Entity or hide the entity from only the creator. This *MUST* be used\n with dynamically created Entities, Entities created using scene.xml do not\n have a \"creator\" and so will not be hidden.\n \n This Component is currently only designed for simple use like having an object or panel that\n only the creator can see. If you need more complex visibility logic you will need to write\n your own Visibility Component and System, feel free to use this one as a reference.\n \n @param state The state of the visibility, see CreatorVisibilityState for more info\n"
    },
    {
      "name": "com.meta.spatial.toolkit.Dome",
      "attributes": [
        {
          "name": "radius",
          "keyString": "radius",
          "type": {
            "attributeType": "Float"
          },
          "description": "The radius of the dome in meters "
        }
      ],
      "description": "\n Defines the dimensions of a dome shape by a radius. This can be used for skyboxes.\n \n @param radius The radius of the dome in meters\n @property radius The radius of the dome in meters\n"
    },
    {
      "name": "com.meta.spatial.toolkit.Followable",
      "attributes": [
        {
          "name": "active",
          "keyString": "active",
          "type": {
            "attributeType": "Boolean"
          },
          "description": "Whether entity is actively following or not "
        },
        {
          "name": "maxAngle",
          "keyString": "maxAngle",
          "type": {
            "attributeType": "Float"
          },
          "description": "\n Maximum Y angle offset a followable will keep from target, 0 is straight ahead, positive values\n are up, negative values are down\n"
        },
        {
          "name": "minAngle",
          "keyString": "minAngle",
          "type": {
            "attributeType": "Float"
          },
          "description": "\n Minimum Y angle offset a followable will keep from target, 0 is straight ahead, positive values\n are up, negative values are down\n"
        },
        {
          "name": "offset",
          "keyString": "offset",
          "type": {
            "attributeType": "Pose"
          },
          "description": "Pose offset to keep from target. Defining a quaternion will rotate the Entity "
        },
        {
          "name": "speed",
          "keyString": "speed",
          "type": {
            "attributeType": "Float"
          },
          "description": "How fast followable tracks to its desired location. Float value is a percent of default speed "
        },
        {
          "name": "target",
          "keyString": "target",
          "type": {
            "attributeType": "Entity"
          },
          "description": "Target Entity to follow "
        },
        {
          "name": "tolerance",
          "keyString": "tolerance",
          "type": {
            "attributeType": "Float"
          },
          "description": "This is the change in distance needed to start moving "
        },
        {
          "name": "type",
          "keyString": "type",
          "type": {
            "attributeType": "com.meta.spatial.toolkit.FollowableType"
          },
          "description": "The type of behavior an object has when following (faces user, pivots on y axis, etc.) "
        }
      ],
      "description": "\n Followable is a component that enables an entity to stay in front of another entity. Followable\n will track the orientation of the parent and move itself to stay in front.\n \n @param target Target Entity to follow\n @param offset Pose offset to keep from target. Defining a quaternion will rotate the Entity\n @param minAngle Minimum Y angle offset a followable will keep from target, 0 is straight ahead,\n    positive values are up, negative values are down\n @param maxAngle Maximum Y angle offset a followable will keep from target, 0 is straight ahead,\n    positive values are up, negative values are down\n @param type The behavior an object has when following (faces user, pivots on y axis, etc.)\n @param tolerance This is the change in distance needed to start moving\n @param speed How fast followable tracks to its desired location. Float value is a percent of\n    default speed\n @param active Whether entity is actively following or not\n"
    },
    {
      "name": "com.meta.spatial.toolkit.Grabbable",
      "attributes": [
        {
          "name": "enabled",
          "keyString": "enabled",
          "type": {
            "attributeType": "Boolean"
          },
          "description": "Defines whether the object can be grabbed or not. "
        },
        {
          "name": "isGrabbed",
          "keyString": "isGrabbed",
          "type": {
            "attributeType": "Boolean"
          },
          "description": "Whether the object is currently grabbed or not "
        },
        {
          "name": "maxHeight",
          "keyString": "maxHeight",
          "type": {
            "attributeType": "Float"
          },
          "description": "the maximum height an object can be held when grabbed "
        },
        {
          "name": "minHeight",
          "keyString": "minHeight",
          "type": {
            "attributeType": "Float"
          },
          "description": "the minimum height an object can be held when grabbed "
        },
        {
          "name": "type",
          "keyString": "type",
          "type": {
            "attributeType": "com.meta.spatial.toolkit.GrabbableType"
          },
          "description": "The type of behavior an object has when grabbed (faces user, pivots on y axis, etc.) "
        }
      ],
      "description": "\n Grabbable is a component that allows an object to be grabbed by a controller. It requires the\n Mesh Component to be present.\n \n @param enabled Defines whether the object can be grabbed or not.\n @param type The type of behavior an object has when grabbed (faces user, pivots on y axis, etc.)\n @param isGrabbed Whether the object is currently grabbed or not\n @param minHeight the minimum height an object can be held when grabbed\n @param maxHeight the maximum height an object can be held when grabbed\n"
    },
    {
      "name": "com.meta.spatial.toolkit.Hittable",
      "attributes": [
        {
          "name": "hittable",
          "keyString": "hittable",
          "type": {
            "attributeType": "com.meta.spatial.toolkit.MeshCollision"
          },
          "description": "The type of behavior the object can be hit using. "
        }
      ],
      "description": "\n Defines whether an object is hittable or not.\n \n  @param hittable The type of behavior the object can be hit using\n  @property hittable The type of behavior the object can be hit using\n"
    },
    {
      "name": "com.meta.spatial.toolkit.Panel",
      "attributes": [
        {
          "name": "hittable",
          "keyString": "hittable",
          "type": {
            "attributeType": "com.meta.spatial.toolkit.MeshCollision"
          },
          "description": "hittable hit test type for the panel, @see MeshCollision "
        },
        {
          "name": "panelRegistrationId",
          "keyString": "panel",
          "type": {
            "attributeType": "Int"
          },
          "description": "panelRegistrationId The id of the panel. This is used to identify the @PanelRegistration when creating the panel. "
        }
      ],
      "description": "\n Panel is a component that can be attached to a scene object to indicate that it is a panel.\n     @param panelRegistrationId The id of the panel. This is used to identify the @PanelRegistration when creating the panel.\n     @param hittable hit test type for the panel, @see MeshCollision\n"
    },
    {
      "name": "com.meta.spatial.toolkit.PanelClickState",
      "attributes": [
        {
          "name": "clickStateInternal",
          "keyString": "clickStateInternal",
          "type": {
            "attributeType": "Int"
          },
          "description": "The current state of the panel click. "
        }
      ],
      "description": "\n PanelClickState is a component that is used to track the state of a panel click. It is used\n  in @see PanelClickSystem, and passes the state to the @see Panel component.\n \n  @param clickState The current state of the panel click.\n  @constructor Creates a new PanelClickState component with the specified click state.\n"
    },
    {
      "name": "com.meta.spatial.toolkit.PanelDimensions",
      "attributes": [
        {
          "name": "dimensions",
          "keyString": "dimensions",
          "type": {
            "attributeType": "Vector2"
          }
        }
      ],
      "description": "\n PanelDimensions is a component that holds the dimensions of a panel. This is used to override the\n height and width of a panel when creating the panel. Without it, the panel\u0027s height and width\n will be the values from @see PanelRegistration.\n \n @param dimensions The dimensions of the panel.\n @property dimensions The dimensions of the panel.\n"
    },
    {
      "name": "com.meta.spatial.toolkit.Plane",
      "attributes": [
        {
          "name": "depth",
          "keyString": "depth",
          "type": {
            "attributeType": "Float"
          }
        },
        {
          "name": "width",
          "keyString": "width",
          "type": {
            "attributeType": "Float"
          }
        }
      ],
      "description": "\n Defines the dimensions of a horizontal plane.\n \n @param width The width of the plane\n @param depth The depth of the plane\n @property width The width of the plane\n @property depth The depth of the plane\n @constructor Creates a plane with default width and depth of 1.0f\n"
    },
    {
      "name": "com.meta.spatial.toolkit.Quad",
      "attributes": [
        {
          "name": "max",
          "keyString": "max",
          "type": {
            "attributeType": "Vector2"
          }
        },
        {
          "name": "min",
          "keyString": "min",
          "type": {
            "attributeType": "Vector2"
          }
        }
      ],
      "description": "\n A Quad is a 2D shape that can be used to represent a 2D surface in 3D space. It is defined by its\n minimum and maximum coordinates.\n \n @param min The minimum coordinates of the Quad.\n @param max The maximum coordinates of the Quad.\n @property min The minimum coordinates of the Quad.\n @property max The maximum coordinates of the Quad.\n @constructor Creates a new Quad with the given minimum and maximum coordinates.\n"
    },
    {
      "name": "com.meta.spatial.toolkit.RoundedBox",
      "attributes": [
        {
          "name": "max",
          "keyString": "max",
          "type": {
            "attributeType": "Vector3"
          },
          "description": "\n The relative offset of the top corner (furthest in the +x, +y, +z direction) of the box from\n the center\n"
        },
        {
          "name": "min",
          "keyString": "min",
          "type": {
            "attributeType": "Vector3"
          },
          "description": "\n The relative offset of the bottom corner (furthest in the -x, -y, -z direction) of the box from\n the center\n"
        },
        {
          "name": "radius",
          "keyString": "radius",
          "type": {
            "attributeType": "Vector3"
          },
          "description": "\n The radii of the rounded edges of the box, where the radii corresponds to the edges along that\n plane. (i.e radius.x corresponds to the edges running along in the x axis)\n"
        }
      ],
      "description": "\n Defines the dimensions of a box shape with rounded edges by the relative offset of two opposite\n corners and a Vector3 of radii to modify the roundedness of the edges\n"
    },
    {
      "name": "com.meta.spatial.toolkit.ScenePlane",
      "attributes": [
        {
          "name": "extents",
          "keyString": "extents",
          "type": {
            "attributeType": "Vector3"
          },
          "description": "The extents of the plane. "
        },
        {
          "name": "name",
          "keyString": "name",
          "type": {
            "attributeType": "String"
          },
          "description": "The name of the plane "
        },
        {
          "name": "offset",
          "keyString": "offset",
          "type": {
            "attributeType": "Vector3"
          },
          "description": "The offset of the plane. "
        },
        {
          "name": "type",
          "keyString": "type",
          "type": {
            "attributeType": "String"
          },
          "description": "The type of the plane "
        }
      ],
      "description": "\n A ScenePlane is a 2D plane in the scene. It has a name, type, offset, and extents.\n \n  @param name The name of the plane.\n  @param type The type of the plane.\n  @param offset The offset of the plane.\n  @param extents The extents of the plane.\n"
    },
    {
      "name": "com.meta.spatial.toolkit.SceneVolume",
      "attributes": [
        {
          "name": "extents",
          "keyString": "extents",
          "type": {
            "attributeType": "Vector3"
          },
          "description": "The extents of the volume. "
        },
        {
          "name": "name",
          "keyString": "name",
          "type": {
            "attributeType": "String"
          },
          "description": "The name of the volume "
        },
        {
          "name": "offset",
          "keyString": "offset",
          "type": {
            "attributeType": "Vector3"
          },
          "description": "The offset of the volume. "
        },
        {
          "name": "type",
          "keyString": "type",
          "type": {
            "attributeType": "String"
          },
          "description": "The type of the volume "
        }
      ],
      "description": "\n A SceneVolume is a 3D volume that can be used to represent a physical object in the scene.\n \n  @param name The name of the volume, identifier for the volume.\n  @param type The type of the volume, it will be used to determine a Anchor is belong to the volume\n    or not.\n  @param offset The offset of the volume, all the Entity belongs to the volume will be offset by\n    this value.\n  @param extents The extents of the volume\n"
    },
    {
      "name": "com.meta.spatial.toolkit.Sphere",
      "attributes": [
        {
          "name": "radius",
          "keyString": "radius",
          "type": {
            "attributeType": "Float"
          },
          "description": "The radius of the sphere in meters "
        }
      ],
      "description": "\n The component that defines the dimensions of a sphere by the radius. To be used with the\n `mesh://sphere` `Mesh` URI.\n \n @param radius The radius of the sphere in meters\n @property radius The radius of the sphere in meters\n @constructor Creates a sphere with the given radius\n"
    },
    {
      "name": "com.meta.spatial.toolkit.SupportsLocomotion",
      "attributes": [],
      "description": "\n This component is used to indicate that an entity supports locomotion. When added to an entity\n with a mesh, it allows for default locomotion on the mesh\n"
    },
    {
      "name": "com.meta.spatial.toolkit.TrackedBody",
      "attributes": []
    }
  ],
  "enums": [
    {
      "name": "com.meta.pixelandtexel.scanner.HandSide",
      "values": [
        "LEFT",
        "RIGHT"
      ]
    },
    {
      "name": "com.meta.spatial.toolkit.ControllerType",
      "values": [
        "CONTROLLER",
        "HAND",
        "EYES"
      ]
    },
    {
      "name": "com.meta.spatial.toolkit.CreatorVisibilityState",
      "values": [
        "CREATOR_ONLY_VISIBLE",
        "CREATOR_ONLY_INVISIBLE"
      ]
    },
    {
      "name": "com.meta.spatial.toolkit.FollowableType",
      "values": [
        "FACE",
        "PIVOT_Y"
      ]
    },
    {
      "name": "com.meta.spatial.toolkit.GrabbableType",
      "values": [
        "FACE",
        "PIVOT_Y"
      ]
    },
    {
      "name": "com.meta.spatial.toolkit.MeshCollision",
      "values": [
        "NoCollision",
        "LineTest",
        "LineTest_IgnoreVisible"
      ]
    },
    {
      "name": "com.meta.spatial.toolkit.PlaybackState",
      "values": [
        "PLAYING",
        "PAUSED"
      ]
    },
    {
      "name": "com.meta.spatial.toolkit.PlaybackType",
      "values": [
        "LOOP",
        "CLAMP",
        "BOUNCE",
        "REVERSE_LOOP"
      ]
    }
  ]
}
